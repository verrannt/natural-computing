# -*- coding: utf-8 -*-
"""Natural Computing Assig1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TFQQI-6JC4Sbswc_3tnRoKoZdmiYgdyG
"""

# Simple GA for TSP
import numpy as np
import re
import random

# function for dist between twodimensional arrays:
def distance(c1, c2):
  x1 = cities[c1]
  x2 = cities[c2]
  d = np.sqrt(
        np.square(abs(x1[0] - x2[0]))
          + np.square(abs(x1[1] - x2[1]))
        )
  return d

# evaluation function
def calc_fitnesses(population):
  fitnesses = []
  for candidate in population:
    fitness = 0
    position = candidate[0]
    for city in candidate:
      fitness += distance(position, city)
      position = city 
    fitnesses.append(fitness)
  fitnesses = np.array(fitnesses)
  return fitnesses

def select_candidates(population, fitnesses, M):
  return random.choices(population, weights=fitnesses, k=M)

def recombine(pool, N):
  new_population = np.empty((N, 50))
  n = 0
  while len(pool) > 1:
    p1 = pool.pop()
    p2 = pool.pop()
    cut_point1 = np.random(0, len(p1))
    cut_point2 = np.random(0, len(p1))
    if cut_point2 < cut_point1:
      interm = cut_point2
      cut_point2 = cut_point1
      cut_point1 = interm
    c1 = np.empty(50)
    c2 = np.empty(50)
    for i in range(cut_point1, cut_point2):
      c1[i] = p1[i]
      c2[1] = p2[i]
    for i in range(cut_point2, len(p1)):
      # TODO
    for i in range(0, cut_point1)
      # TODO
# size of population
N = 100

# max iter
max_k = 100

# get coordinates of the cities
cities = np.empty((50,2))
with open("file-tsp.txt", mode='r') as f:
  lines = f.readlines()
for l in range(len(lines)):
  coords = lines[l].split()
  cities[l] = [float(i) for i in coords]

# initialize the population  
population = np.empty((N, 50), dtype=int)
for i in range(N):
  population[i] = np.random.permutation(50)

# train initial fitness
fitnesses = calc_fitnesses(population)

# training loop
mating_pool = select_candidates(population, fitnesses, N)

# create new population through selection, recombination and mutation